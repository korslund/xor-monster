// More parser testing!
/+ /*
/+
abc; "def*/"; ";
+/xyz+/ hello;
// How to define comprehensions or folds:
var form1(arr, function(@elem):null fn) {}
var form2(arr, start, function(@res,@elem):null fn) {}
// Examples:
apply([1,2,3], {$1 *= 2});    // Returns [2,4,6]
select([1,2,3], {$1 % 2});    // Returns [1,3]
fold([1,2,3], 0, {$1 += $2}); // Returns 6
// Implementations:
var apply(arr, function(@elem,index):null fn)
{
  var res = arr;
  for(i,@v; res) fn(v,i);
  return res;
}
var select(arr, function(const @elem, index):null fn)
{
  var res[];
  for(v; arr) if(fn(v)) res ~= v;
  return res;
}
var fold(arr, start, function(@res, const @elem, index):null fn)
{
  for(v; arr) fn(start,v);
  return start;
}
// Examples
var sum(arr, start=0) { fold(arr,start,{$1+=$2}) }
var average(arr) { sum(arr)/arr.len }
var waverage(arr, weights)
{
  assert(arr.len == weights.len);
  return fold(arr,0,{$1+=weights[$3]*$2}) / sum(weights);
}

// Functions are automatically recreated as comprehensions if the
// types allow it
double sin(double);
sin([1,2,3]); // Returns [sin(1),sin(2),sin(3)]

// Array slicing
var a = arr[2..5]; // Three elements
var @b = arr[2..5];
b[2] = 4; // This would modify 'arr'.
a[2] = 5; // This would not.
arr.len=3; // Drop elements from arr
a[2] = 5; // Fine, a is entirely independent
b[0] = 1; // Error. Parts of 'b' no longer exist, which makes the
          // entire object defunct.
a.len = 10; // OK, resizes 'a'
b.len = 10; // Error: slice references are fixed in size

var a = arr[5..]; // All elements from arr[5] and up
var b = arr[..5]; // All elements up to but not including arr[5]
var arr2 = b ~ a; // This would recreate the original arrayx
// Ranges and arrays can also be used in switch() and case() statements:
case(x)
{
 ..0: a;
 [1,4,7]: b;
 0..10: c;
 10..: d;
}
for(x; 0..10) writeln(x); // Prints numbers 0 to 9, but NOT 10.
int[] arr = [0..10]; // Creates an array of numbers 0 to 9.
// TODO: We haven't invented a good step syntax yet
format = "%s was an %s in %s"%["Lisa","idiot","the forest"];
format = "format"%array;
Log("myfunc(%s, %s) iter=%s" % [var1, var2, iter]);
// A function that generates a function
var addN(N) {({N + $1})}
f = addN(10);
g = addN(19);
writelns(f(1), f(2), f(3)); // 11 12 13
writelns(g(1), g(2), g(3)); // 20 21 22
// Various fun syntax
var[] arr;
for(i; [0,1,2,10]) arr ~= {i*$1};
arr(3); // Gives [0,3,6,30]
// Array literals can be used as left-expressions:
int a,b,c,d, arr=[1,2,3,4];
[a,b,c,d] = arr; // Sets a=1, b=2, c=3, d=4
[a,b] = [b,a]; // Swap values
// Function literals with no body can be used as types
function(int x):null a,b,c;
// Set multiple array values
arr[1..4] = 3;
arr[1,3,4,5] = 4;
// Get array slices
a = arr[2..4];
a = arr[1,5,4,2,1];
x in [1,2,3];
a*b*c in x~y == false;
